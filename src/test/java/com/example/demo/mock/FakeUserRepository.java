package com.example.demo.mock;

import com.example.demo.common.domain.exception.ResourceNotFoundException;
import com.example.demo.user.domain.User;
import com.example.demo.user.domain.UserStatus;
import com.example.demo.user.service.port.UserRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FakeUserRepository implements UserRepository {

    private final List<User> data = new ArrayList<>();
    private Long autoGeneratedId = 0L;

    @Override
    public User getById(long id) {
        return findById(id).orElseThrow(() -> new ResourceNotFoundException("Users", id));
    }

    @Override
    public Optional<User> findById(long id) {
        return data.stream().filter(it -> it.getId().equals(id)).findAny();
    }

    @Override
    public Optional<User> findByIdAndStatus(long id, UserStatus userStatus) {
        return data.stream().filter(it -> it.getId().equals(id) && it.getStatus() == userStatus).findAny();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
        return data.stream().filter(it -> it.getEmail().equals(email) && it.getStatus() == userStatus).findAny();
    }

    @Override
    public User save(User user) {
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                .id(++autoGeneratedId)
                .email(user.getEmail())
                .nickname(user.getNickname())
                .address(user.getAddress())
                .status(user.getStatus())
                .certificationCode(user.getCertificationCode())
                .lastLoginAt(user.getLastLoginAt())
                .build();
            data.add(newUser);
            return newUser;
        } else {
            data.removeIf(it -> Objects.equals(it.getId(), user.getId()));
            data.add(user);
            return user;
        }
    }
}
